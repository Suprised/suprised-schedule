#org.quartz.scheduler.instanceName = MyScheduler
#org.quartz.threadPool.threadCount = 3
#org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore

# fileName： jobs.xml,jobs2.xml,jobs3.xml
#org.quartz.plugin.jobInitializer.class = org.quartz.plugins.xml.XMLSchedulingDataProcessorPlugin
#org.quartz.plugin.jobInitializer.fileNames = jobs.xml
#org.quartz.plugin.jobInitializer.failOnFileNotFound = true
# 指定多长时间重新加载xml文件:单位秒
#org.quartz.plugin.jobInitializer.scanInterval = -1
#org.quartz.plugin.jobInitializer.wrapInUserTransaction = false


#定义调度名称，所有的节点中配置的调度名称必须一样，这样quartz才会认为是同个调度，可以随便设
org.quartz.scheduler.instanceName = DefaultQuartzScheduler

#我们不需要设置调度为RMI服务器，所以设为false
org.quartz.scheduler.rmi.export = false
org.quartz.scheduler.rmi.proxy = false

#如果你要 Quartz 在调用你的 Job 的 execute 之前启动一个 UserTransaction 的话，设置这个属性为 true。
#这个事物将在 Job 的 execute 方法完成和 JobDataMap(假如是一个 StatefulJob) 更新后提交。默认值为 false
org.quartz.scheduler.wrapJobExecutionInUserTransaction = false

#用于指定你想要使用的 ThreadPool 实现的类名。Quartz 自带的 ThreadPool 实现是 org.quartz.simpl.SimpleThreadPool，
#它在大多数情况下是够用的。它有着十分简单的行为并得到过很好的测试。它提供了一个固定大小的线程池，且线程在 Scheduler 的生命期内是 "活着" 的。
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool

#这个属性指定了可用于并发执行 Job 的线程的数量。它可设置为一个 1 和 100 之间的正整数。大于 100 的值也是允许的但却不切实际。
#假如你一天中只有少数几个 Job 要触发，那一个线程就够了。如果你有数以万计的 Job，且每分钟有许多被触发，那么你或许要的线程数就会是 50 或者 100。
org.quartz.threadPool.threadCount = 10

#线程优先级，1-10的整数，默认为5
org.quartz.threadPool.threadPriority = 5

#假如你希望新线程继承自创建父线程的 Classloader，就设置为 true。默认为 false。
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread = true

#设定这个属性为一个毫秒数，Scheduler 允许一个 Triiger 在超过它的下次触发时多少毫秒才算是错过触发。默认值是 60000 (60 秒)。
org.quartz.jobStore.misfireThreshold = 60000

#org.quartz.impl.jdbcjobstore.JobStoreTX：当你想要控制事务或工作在非应用服务器环境中是使用
#org.quartz.impl.jdbcjobstore.JobStoreCMT：当你工作在应用服务器环境中和想要容器控制事务时使用。
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX

#Quartz 通过一个代理可以使用大部分流行的数据库平台。
#org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.CloudscapeDelegate 
#org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.DB2v6Delegate 
#org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.DB2v7Delegate 
#org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.DriverDelegate 
#org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.HSQLDBDelegate 
#org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.PointbaseDelegate 
#org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate 
#org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate 
#org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.WebLogicDelegate 
#org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.oracle.WebLogicOracleDelegate 
#org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate 
org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.MSSQLDelegate

#"使用属性" 设置指示着 JDBC JobStore 所有在 JobDataMap 中的值会是字符串，因此，它们可以名-值对来存储，
#而无需把更复杂的对象以序列化的形式存储在 BLOB 列中。这样做很有好处的，因为避免了伴随着序列化非字符串类到 BLOB 时产生的类版本问题。
org.quartz.jobStore.useProperties = true

#数据库中quartz相关的表的前缀
org.quartz.jobStore.tablePrefix = QRTZ_


#是否集群  value: true or false
org.quartz.jobStore.isClustered = false

#这是设定 JobStore 同一时刻能处理错过触发 Trigger 的最大数量。一次同时处理太多(超过数十个)的话，会导致数据库表被锁定过长的时间，
#从而影响到了触发其他的(还未错过触发) Trigger 的性能。  
org.quartz.jobStore.maxMisfiresToHandleAtATime=8

#A value of "true" tells Quartz (when using JobStoreTX or CMT) to call setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE) 
#on JDBC connections. This can be helpful to prevent lock timeouts with some databases under high load, and "long-lasting" transactions.
org.quartz.jobStore.txIsolationLevelSerializable=false

#Whether or not the acquisition of next triggers to fire should occur within an explicit database lock. This was once necessary (
#in previous versions of Quartz) to avoid dead-locks with particular databases, but is no longer considered necessary, hence the default value is "false".
org.quartz.jobStore.acquireTriggersWithinLock=false

#org.quartz.jobStore.txIsolationLevelReadCommitted = READ_COMMITTED_ISOLATION

#当是mssql数据库时，启动会报异常，加上以下值就正常了，尚不知为何必？"SELECT * FROM {0} LOCKS WHERE LOCK_NAME = ? FOR UPDATE"
#org.quartz.jobStore.selectWithLockSQL=SELECT * FROM {0}LOCKS UPDLOCK WHERE LOCK_NAME = ?
#org.quartz.jobStore.selectWithLockSQL=select LOCK_NAME from QRTZ_LOCKS with (updlock,rowlock) where LOCK_NAME=?

org.quartz.jobStore.dataSource = myDS

# 可以指定数据库连接提供者。需要实现ConnectionProvider接口，可以使用spring的数据源来提供连接
org.quartz.dataSource.myDS.connectionProvider.class=com.dascom.common.quartz.SuiteQuartzDataSourceProvider

#org.quartz.dataSource.myDS.driver=com.mysql.jdbc.Driver 
#org.quartz.dataSource.myDS.URL=jdbc:mysql://localhost/quartzJDBC?useUnicode=true&characterEncoding=utf-8
#org.quartz.dataSource.myDS.user=root
#org.quartz.dataSource.myDS.password=123456
#org.quartz.dataSource.myDS.maxConnections=20

#org.quartz.dataSource.myDS.driver=net.sourceforge.jtds.jdbc.Driver
#org.quartz.dataSource.myDS.URL=jdbc:jtds:sqlserver://192.168.1.33;DatabaseName=ljxQuartz;SelectMethod=cursor;sendStringParametersAsUnicode=true
#org.quartz.dataSource.myDS.user=sa
#org.quartz.dataSource.myDS.password=dascom
#org.quartz.dataSource.myDS.maxConnections=20